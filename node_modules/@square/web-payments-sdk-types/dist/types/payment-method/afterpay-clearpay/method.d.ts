import { AfterpayButtonOptions, AfterpayCheckoutWidgetOptions, AfterpayDisplayInformationModalOptions, AfterpayMessagingOptions } from './types';
import { PaymentMethod, TokenResult } from '../payment-method-types';
/**
 * Create an Afterpay/Clearpay payment method instance.
 *
 * @example
 * const paymentRequest = payments.paymentRequest({
 *   countryCode: 'US',
 *   currencyCode: 'USD',
 *   total: {
 *     amount: '5.79',
 *     label: 'Total'
 *   },
 *   requestShippingContact: true,
 * });
 *
 * paymentRequest.addEventListener('afterpay_shippingaddresschanged', function (contact) {
 *   return {
 *     shippingOptions: [
 *       {
 *         id: 'FREE',
 *         amount: '0.00',
 *         label: 'Free',
 *         taxLineItems: [
 *           {
 *             id: 'taxItem1',
 *             label: 'Taxes',
 *             amount: '3.50',
 *           }
 *         ],
 *         total: {
 *           amount: '9.29',
 *           label: 'Total'
 *         }
 *       }
 *     ],
 *   }
 * });
 *
 * const afterpayClearpay = await payments.afterpayCleapay(paymentRequest);
 * await afterpayClearpay.attach('#afterpay');
 *
 *
 * afterpayClearpayButton.onclick = async () => {
 *   const tokenResult = await afterpayClearpay.tokenize();
 *
 *   // Pass the TokenResult to your server to complete the payment
 * }
 *
 * @param paymentRequest - the PaymentRequest object created by [payments.paymentRequest(...)](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.paymentRequest)
 * @throws {InvalidPaymentRequestError} the provided payment request was invalid
 * @throws {UnexpectedError} if the payment context cannot initialize
 * @throws {ScriptLoaderError} if the Afterpay/Clearpay script cannot be loaded
 */
interface AfterpayClearpay extends PaymentMethod {
    /**
     * Attaches the Afterpay/Clearpay button to the page.
     *
     * @example
     * // Create an Afterpay/Clearpay button in the target element with customization
     * // including a black button background, the button type, and the checkout window button type.
     * await afterpayClearpay.attach('#afterpay', {
     *   buttonColor: 'black',
     *   buttonType: 'buy_now_with_afterpay',
     *   finalCtaButtonType: 'buy_now',
     *   useCustomButton: false,
     * });
     *
     * @param selector - A valid selector of an empty <div> or <span> element
     * where the Afterpay/Clearpay button will be inserted.
     * @param options - An optional object containing configuration objects for the Afterpay/Clearpay button.
     *
     * @returns {Promise} - A promise that resolves when the button has attached to the page
     * @throws {PaymentMethodUnsupportedError} Afterpay/Clearpay is not available due to
     * misconfiguration or non-support on this device or browser
     */
    attach(selector: string, options?: AfterpayButtonOptions): Promise<void>;
    /**
     * Attaches the [Afterpay/Clearpay Messaging](https://developers.afterpay.com/afterpay-online/reference/afterpay-messaging-1) element
     * to the element provided.
     *
     * @example
     * // Create an Afterpay/Clearpay messaging element in the target element with customization
     * // including a different badge themes and modal themes.
     * await afterpayClearpay.attachMessaging('#afterpayMessage', {
     *   badgeTheme: 'black-on-mint',
     *   modalLinkStyle: 'circled-info-icon',
     *   modalTheme: 'mint',
     *   size: 'lg',
     * });
     *
     * @param selector - A valid selector of an empty <div> or <span> element where the
     * Afterpay/Clearpay messaging element will be inserted.
     * @param options - An optional object containing configuration objects for the Afterpay/Clearpay messaging element.
     * @returns {Promise} - A promise that resolves when the messaging element has attached to the page
     *
     */
    attachMessaging(selector: string, options?: AfterpayMessagingOptions): Promise<void>;
    /**
     *
     * Displays the information modal from the [Afterpay/Clearpay Messaging](https://developers.afterpay.com/afterpay-online/reference/afterpay-messaging-1) element
     * by clicking on the element provided. This is good for cases in which you want to provide your own button or interface for
     * displaying the legal information for Afterpay/Clearpay.
     *
     * @example
     * afterpayClearpay.attachMessaging('#afterpayModalButton', {
     *   modalTheme: 'mint',
     * });
     *
     * @param options - An optional object containing configuration objects for the Afterpay/Clearpay information modal.
     */
    displayInformationModal(options?: AfterpayDisplayInformationModalOptions): void;
    /**
     * Displays a widget containing the payment schedule.
     *
     * @example
     * afterpayClearpay.attachCheckoutWidget('#afterpay-checkout-widget);
     *
     * @param selectorOrElement - A valid selector or element of an empty <div> or <span> where the
     * Afterpay checkoutWidget element will be inserted.
     * @param options - A set of options which allows the developer to customize the appearance of the checkout widget.
     */
    attachCheckoutWidget(selectorOrElement: string | HTMLElement, options?: AfterpayCheckoutWidgetOptions): Promise<void>;
    /**
     * Destroys this `AfterpayClearpay` instance. This method cleans up the `AfterpayClearpay` instance and
     * removes the Afterpay/Clearpay button from the page.
     *
     * @returns {Promise} A promise which resolves when the `AfterpayClearpay` instance is destroyed
     *
     * @example
     * await afterpayClearpay.destroy();
     */
    destroy(): Promise<void>;
    /**
     * This method presents the Afterpay/Clearpay payment popup. When the buyer completes their interaction
     * with Afterpay/Clearpay, the returned promise resolves with a tokenResult object. The returned token
     * and buyer details can be used to complete the payment on your server.
     *
     * @example
     * afterpayClearpayButton.onclick = async () => {
     *   const tokenResult = await afterpayClearpay.tokenize();
     * }
     * @returns {Promise} A promise that resolves when the buyer completes
     * their interaction with Afterpay/Clearpay.
     * @throws {UnexpectedError} Tokenization failed because of an internal error
     */
    tokenize(): Promise<TokenResult>;
}
export { AfterpayClearpay };

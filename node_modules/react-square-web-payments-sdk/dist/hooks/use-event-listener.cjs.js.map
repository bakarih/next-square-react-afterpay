{"version":3,"file":"use-event-listener.cjs.js","sources":["../../src/hooks/use-event-listener.ts"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\n\nexport const getRefElement = <T>(\n  element?: React.RefObject<Element> | T\n): Element | T | undefined | null | React.RefObject<Element> => {\n  if (element && 'current' in element) {\n    return element.current;\n  }\n\n  return element;\n};\n\nconst isSsr = !(typeof window !== 'undefined' && window.document?.createElement);\n\ntype UseEventListenerProps = {\n  type: keyof WindowEventMap;\n  listener: EventListener;\n  element?: React.RefObject<Element> | HTMLElement | Document | Window | null;\n  options?: AddEventListenerOptions;\n};\n\nfunction useEventListener({ type, listener, element = isSsr ? undefined : window, options }: UseEventListenerProps) {\n  const savedListener = React.useRef<EventListener>();\n\n  React.useEffect(() => {\n    savedListener.current = listener;\n  }, [listener]);\n\n  const handleEventListener = React.useCallback((event: Event) => {\n    savedListener.current?.(event);\n  }, []);\n\n  React.useEffect(() => {\n    const target = getRefElement(element) as unknown as Element;\n\n    target?.addEventListener(type, handleEventListener, options);\n\n    return () => target?.removeEventListener(type, handleEventListener);\n  }, [type, element, options, handleEventListener]);\n}\n\nexport { useEventListener };\nexport type { UseEventListenerProps };\n"],"names":["React"],"mappings":"mdAGa,KAAA,GAAgB,AAC3B,GAEI,GAAW,WAAa,GACnB,EAAQ,QAGV,EAGH,EAAQ,CAAE,OAAO,QAAW,KAAe,OAAO,UAAU,eASlE,WAA0B,CAAE,OAAM,WAAU,UAAU,EAAQ,OAAY,OAAQ,WAAkC,CAC5G,KAAA,GAAgBA,EAAM,SAE5BA,EAAM,UAAU,IAAM,CACpB,EAAc,QAAU,CAAA,EACvB,CAAC,CAAQ,CAAC,EAEb,KAAM,GAAsBA,EAAM,YAAY,AAAC,GAAiB,CAC9D,EAAc,UAAU,CAAK,CAC/B,EAAG,CAAE,CAAA,EAELA,EAAM,UAAU,IAAM,CACd,KAAA,GAAS,EAAc,CAAO,EAE5B,UAAA,iBAAiB,EAAM,EAAqB,CAAO,EAEpD,IAAM,GAAQ,oBAAoB,EAAM,CAAmB,GACjE,CAAC,EAAM,EAAS,EAAS,CAAmB,CAAC,CAClD"}
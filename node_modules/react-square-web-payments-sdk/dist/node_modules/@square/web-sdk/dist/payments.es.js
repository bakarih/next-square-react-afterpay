import { loadSquare } from './load.es.js';

var __awaiter = (globalThis && globalThis.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const Version = 'v1';
class InvalidApplicationIdError extends Error {
    constructor(message = "The Payment 'applicationId' option is not in the correct format.") {
        super(message);
        this.name = 'InvalidApplicationIdError';
        Object.setPrototypeOf(this, InvalidApplicationIdError.prototype);
    }
}
function getSrcForApplicationId(applicationId) {
    let src = '';
    if (applicationId.startsWith('sq0idp-')) {
        src = 'https://web.squarecdn.com/';
    }
    if (applicationId.startsWith('sandbox-sq0idb-')) {
        src = 'https://sandbox.web.squarecdn.com/';
    }
    if (src.length === 0) {
        throw new InvalidApplicationIdError();
    }
    src += `${Version}/square.js`;
    return src;
}
function payments(applicationId, locationId, overrides) {
    return __awaiter(this, void 0, void 0, function* () {
        const src = (overrides === null || overrides === void 0 ? void 0 : overrides.scriptSrc) !== undefined
            ? overrides.scriptSrc
            : getSrcForApplicationId(applicationId);
        const maybeSquare = yield loadSquare(src);
        if (maybeSquare === null) {
            return null;
        }
        return maybeSquare.payments(applicationId, locationId);
    });
}

export { payments };
//# sourceMappingURL=payments.es.js.map

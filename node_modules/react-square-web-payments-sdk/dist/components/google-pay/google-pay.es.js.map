{"version":3,"file":"google-pay.es.js","sources":["../../../src/components/google-pay/google-pay.tsx"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\nimport type * as Square from '@square/web-sdk';\n\n// Internals\nimport { useForm } from '~/contexts/form';\nimport { useEventListener } from '~/hooks/use-event-listener';\nimport { ButtonLoader } from './google-pay.styles';\nimport type { GooglePayProps } from './google-pay.types';\n\n/**\n * Renders a Google Pay button to use in the Square Web Payment SDK, pre-styled\n * to meet Google's branding guidelines.\n *\n * **Remember** that you need to set `createPaymentRequest()` in `SquareForm` if\n * you going to use this Payment Method\n *\n * @example\n *\n * ```tsx\n * function App() {\n *   return (\n *     <SquareForm {...props}>\n *       <GooglePay />\n *     </SquareForm>\n *   );\n * }\n * ```\n */\nconst GooglePay = ({\n  buttonColor,\n  buttonSizeMode = 'fill',\n  buttonType = 'long',\n  id = 'rswps-google-pay-container',\n  ...props\n}: GooglePayProps): JSX.Element | null => {\n  const [googlePay, setGooglePay] = React.useState<Square.GooglePay | undefined>(() => undefined);\n  const { cardTokenizeResponseReceived, createPaymentRequest, payments } = useForm();\n  const containerRef = React.useRef<HTMLDivElement>(null);\n\n  const options: Square.GooglePayButtonOptions = React.useMemo(() => {\n    const baseOptions = {\n      buttonColor,\n      buttonSizeMode,\n      buttonType,\n    };\n\n    // if a value from options is undefined delete it from the options object\n    return Object.keys(baseOptions).reduce((acc: Record<string, unknown>, key) => {\n      if (baseOptions[key as keyof typeof baseOptions] !== undefined) {\n        acc[key as string] = baseOptions[key as keyof typeof baseOptions];\n      }\n\n      return acc;\n    }, {});\n  }, [buttonColor, buttonSizeMode, buttonType]);\n\n  /**\n   * Handle the on click of the Google Pay button click\n   *\n   * @param e An event which takes place in the DOM.\n   * @returns The data be sended to `cardTokenizeResponseReceived()` function, or an error\n   */\n  const handlePayment = async (e: Event) => {\n    e.stopPropagation();\n\n    if (!googlePay) {\n      console.warn('Google Pay button was clicked, but no Google Pay instance was found.');\n\n      return;\n    }\n\n    try {\n      const result = await googlePay.tokenize();\n\n      if (result.status === 'OK') {\n        return cardTokenizeResponseReceived(result);\n      }\n\n      let message = `Tokenization failed with status: ${result.status}`;\n      if (result?.errors) {\n        message += ` and errors: ${JSON.stringify(result?.errors)}`;\n\n        throw new Error(message);\n      }\n\n      console.warn(message);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!createPaymentRequest) {\n      throw new Error('`createPaymentRequest()` is required when using digital wallets');\n    }\n\n    const abortController = new AbortController();\n    const { signal } = abortController;\n\n    const start = async (signal: AbortSignal) => {\n      const paymentRequest = payments?.paymentRequest(createPaymentRequest);\n\n      if (!paymentRequest) {\n        throw new Error('`paymentRequest` is required when using digital wallets');\n      }\n\n      try {\n        const googlePay = await payments?.googlePay(paymentRequest).then((res) => {\n          if (signal?.aborted) {\n            return;\n          }\n\n          setGooglePay(res);\n\n          return res;\n        });\n\n        await googlePay?.attach(`#${id}`, options);\n\n        if (signal.aborted) {\n          await googlePay?.destroy();\n        }\n      } catch (error) {\n        console.error('Initializing Google Pay failed', error);\n      }\n    };\n\n    start(signal);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [createPaymentRequest, payments, options]);\n\n  useEventListener({\n    listener: handlePayment,\n    type: 'click',\n    element: containerRef,\n    options: {\n      passive: true,\n    },\n  });\n\n  return (\n    <div {...props} id={id} ref={containerRef}>\n      {!googlePay ? <ButtonLoader /> : null}\n    </div>\n  );\n};\n\nexport default GooglePay;\nexport * from './google-pay.types';\n"],"names":[],"mappings":"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"}
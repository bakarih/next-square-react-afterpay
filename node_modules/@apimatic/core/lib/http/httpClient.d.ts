/**
 * bandwidthLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
import { AxiosRequestConfig, AxiosResponse } from 'axios';
import { HttpRequest } from './httpRequest';
import { HttpResponse } from './httpResponse';
import { RetryConfiguration } from './retryConfiguration';
export declare const DEFAULT_AXIOS_CONFIG_OVERRIDES: AxiosRequestConfig;
export declare const DEFAULT_TIMEOUT: number;
/**
 * HTTP client implementation.
 *
 * This implementation is a wrapper over the Axios client.
 */
export declare class HttpClient {
    private _axiosInstance;
    private _timeout;
    constructor({ clientConfigOverrides, timeout, httpAgent, httpsAgent, }?: {
        clientConfigOverrides?: AxiosRequestConfig;
        timeout?: number;
        httpAgent?: any;
        httpsAgent?: any;
    });
    /** Converts an HttpRequest object to an Axios request. */
    convertHttpRequest(req: HttpRequest): AxiosRequestConfig;
    /** Converts an Axios response to an HttpResponse object. */
    convertHttpResponse(resp: AxiosResponse): HttpResponse;
    /**
     * Executes the HttpRequest with the given options and returns the HttpResponse
     * or throws an error.
     */
    executeRequest(request: HttpRequest, requestOptions?: {
        abortSignal?: AbortSignal;
    }): Promise<HttpResponse>;
    private abortError;
}
/** Stable configurable http client options. */
export interface HttpClientOptions {
    /** Timeout in milliseconds. */
    timeout: number;
    /** Custom http agent to be used when performing http requests. */
    httpAgent?: any;
    /** Custom https agent to be used when performing https requests. */
    httpsAgent?: any;
    /** Configurations to retry requests */
    retryConfig: Partial<RetryConfiguration>;
}
//# sourceMappingURL=httpClient.d.ts.map